<div class="canvas">
<canvas id="myCanvas" width="850" height="620"></canvas>
<button id="start" onclick="gameButton()" class="btn-circle-border-double">START</button>
<audio id="soundBar"   src="https://taira-komori.jpn.org/sfxr/sfxrse/02laser/shoot03.mp3"       type="audio/mp3" preload="auto"></audio>
<audio id="soundUp"    src="https://taira-komori.jpn.org/sfxr/sfxrse/04powerup/powerup05.mp3"   type="audio/mp3" preload="auto"></audio>
</div>

<script>
const canvas = document.getElementById("myCanvas");
const ctx = canvas.getContext("2d");

let ballRadius = 10;
let x = canvas.width/2;
let y = canvas.height-80;
let dx = 3;
let dy = -3;
let paddleHeight = 10;
let paddleWidth = 60;
let paddleOffsetBottom = 40;
let paddleX = (canvas.width-paddleWidth)/2;
let rightPressed = false;
let leftPressed = false;
let brickRowCount = 9;
let brickColumnCount = 10;
let brickWidth = 70;
let brickHeight = 20;
let brickPadding = 10;
let brickOffsetTop = 30;
let brickOffsetLeft = 30;
let score = 0
let lives = 3

let bricks = [];
for(let c=0; c<brickColumnCount; c++) {
    bricks[c] = [];
    for(let r=0; r<brickRowCount; r++) {
        bricks[c][r] = { x: 0, y: 0, status: 1 };
    }
}

document.addEventListener("keydown", keyDownHandler, false);
document.addEventListener("keyup", keyUpHandler, false);
document.addEventListener("mousemove", mouseMoveHandler, false)

function mouseMoveHandler(e) {
    let relativeX = e.clientX - canvas.offsetLeft;
    if(relativeX > 0 && relativeX < canvas.width) {
        paddleX = relativeX - paddleWidth/2;
    }
}

  
function keyDownHandler(e) {
  if (e.key == "Right" || e.key == "ArrowRight") {
    rightPressed = true;
  } 
  else if (e.key == "Left" || e.key == "ArrowLeft") {
    leftPressed = true;
  }
}

function keyUpHandler(e) {
  if (e.key == "Right" || e.key == "ArrowRight") {
    rightPressed = false;
  }
  else if(e.key == "Left" || e.key == "ArrowLeft") {
    leftPressed = false;
  }
}

// 音を鳴らす。
function sound(tag){
  document.getElementById(tag).currentTime = 0;
  document.getElementById(tag).play();
  let dicertag = document.getElementById(tag);
  dicertag.volume = 0.1;
}

function collisionDetection() {
    for(let c=0; c<brickColumnCount; c++) {
        for(let r=0; r<brickRowCount; r++) {
            let b = bricks[c][r];
            if (b.status == 1 ) {
              if(x>b.x && x<b.x+brickWidth && y>b.y && y< b.y+brickHeight) {
                dy = -dy;
                sound("soundUp");


                b.status = 0;
                score++
                if(score == brickRowCount*brickColumnCount) {
                    alert("CONGRATULATIONS!")
                    document.location.reload()
                }
              }
            }
        }
    }
}

function drawScore() {
  ctx.font = "16px Arial"
  ctx.fillStyle = "#0095DD"
  ctx.fillText("Score: "+score, 8, 20)
}

function drawLives() {
  ctx.font = "16px Arial";
  ctx.fillStyle = "#0095DD";
  ctx.fillText("Lives: "+lives, canvas.width-65, 20);
}

function drawBall() {
  ctx.beginPath();
    ctx.arc(x, y, ballRadius, 0, Math.PI*2);
    ctx.fillStyle = "green" ;
    ctx.fill();
    ctx.closePath();
}

function drawPaddle() {
  ctx.beginPath()
  ctx.rect(paddleX, canvas.height-paddleHeight-paddleOffsetBottom, paddleWidth, paddleHeight)
  ctx.fillStyle = "#0095DD"
  ctx.fill()
  ctx.closePath()
}

function drawBricks() {
    for(let c=0; c<brickColumnCount; c++) {
        for(let r=0; r<brickRowCount; r++) {
            if (bricks[c][r].status == 1) {
              let brickX = (c*(brickWidth+brickPadding))+brickOffsetLeft;
              let brickY = (r*(brickHeight+brickPadding))+brickOffsetTop;
              bricks[c][r].x = brickX;
              bricks[c][r].y = brickY;
              ctx.beginPath();
              ctx.rect(brickX, brickY, brickWidth, brickHeight);
              ctx.fillStyle = "#0095DD";
              ctx.fill();
              ctx.closePath();
            }
        }
    }
}

function draw() {
  ctx.clearRect(0, 0, canvas.width, canvas.height)
  drawBricks()
  drawBall()
  drawPaddle();
  drawScore()
  collisionDetection()
  // 左端と右端で弾ませる
  if(x + dx > canvas.width-ballRadius || x + dx < ballRadius) {
    dx = -dx;
  }
  // 上端で弾ませる
  if(y + dy < ballRadius) {
      dy = -dy;
  }
  else if(y + dy > canvas.height-paddleOffsetBottom-ballRadius) {
      if(y+dy<canvas.height-paddleOffsetBottom-ballRadius+brickHeight) {

        if(x>paddleX){
          if(x<paddleX + paddleWidth) {
            sound("soundBar");
          dy = -dy;
          }
        }
      }
      if(y+dy>canvas.height-ballRadius){
        lives--;
        if(!lives) {
          alert("GAME OVER");
          document.location.reload();
        }
        else {
          x = canvas.width/2;
          y = canvas.height-paddleOffsetBottom-brickHeight;
          dx = 4;
          dy = -6;
          paddleX = (canvas.width-paddleWidth)/2;
        }
      }
  }

  if(rightPressed && paddleX < canvas.width-paddleWidth) {
    paddleX += 7;
  }
  else if(leftPressed && paddleX > 0) {
    paddleX -= 7;
  }

  x += dx;
  y += dy;
  requestAnimationFrame(draw)
}
function setCanvas() {
  drawBricks();
  drawBall();
  drawPaddle();
  drawScore();
  drawLives();
}

setCanvas();
function gameButton() {
  draw();
  document.getElementById("start").innerHTML = "SPEED UP";
}

</script>